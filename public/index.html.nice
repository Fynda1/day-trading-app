<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fynda Auto Trading BOT</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #0f1419 0%, #1a202c 50%, #2d3748 100%);
            color: white; padding: 10px; min-height: 100vh;
        }
        .container {
            max-width: 1400px; margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px; padding: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }
        .header {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 20px; padding-bottom: 15px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.1);
        }
        h1 { font-size: 2.2em; color: #4facfe; }
        .connection-status {
            padding: 8px 16px; border-radius: 20px;
            font-size: 14px; font-weight: bold; cursor: pointer;
        }
        .connection-online { background: rgba(34, 197, 94, 0.2); color: #22c55e; }
        .connection-offline { background: rgba(239, 68, 68, 0.2); color: #ef4444; }
        .connection-demo { background: rgba(251, 191, 36, 0.2); color: #fbbf24; }

        /* Authentication Modal */
        .auth-modal {
            display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.8); z-index: 1000;
            justify-content: center; align-items: center;
        }
        .auth-panel {
            background: rgba(15, 20, 25, 0.95);
            border: 2px solid #4facfe;
            border-radius: 15px; padding: 30px; max-width: 500px; width: 90%;
            text-align: center;
        }
        .auth-title { font-size: 1.5em; margin-bottom: 20px; color: #4facfe; }
        .auth-button {
            background: #4facfe; color: white; border: none;
            padding: 12px 24px; border-radius: 8px; font-size: 16px;
            font-weight: bold; cursor: pointer; margin: 10px;
            transition: all 0.3s ease; width: 100%;
        }
        .auth-button:hover { background: #3b82f6; transform: translateY(-2px); }
        .auth-input {
            width: 100%; padding: 12px; margin: 10px 0;
            border: 2px solid rgba(79, 172, 254, 0.3);
            border-radius: 8px; background: rgba(255, 255, 255, 0.9);
            color: #1a202c; font-size: 14px;
        }

        .main-grid {
            display: grid; grid-template-columns: 300px 1fr 260px 220px 220px; gap: 10px;
            margin-bottom: 20px;
        }

        .left-panel, .center-panel, .right-panel, .watchlist-panel, .scanner-panel {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px; padding: 15px;
        }

        .section-title {
            font-size: 1.3em; margin-bottom: 15px; color: #e2e8f0;
            border-bottom: 2px solid rgba(79, 172, 254, 0.3); padding-bottom: 8px;
        }

        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 6px; font-weight: 600; color: #cbd5e0; }

        select, input, textarea {
            width: 100%; padding: 10px; border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px; background: rgba(255, 255, 255, 0.9);
            color: #1a202c; font-size: 14px;
        }
        select option { background: #2d3748; color: white; }

        .button-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin-top: 12px; }
        .button-row { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 6px; margin-top: 8px; }

        .btn {
            padding: 8px 12px; border: none; border-radius: 6px;
            font-size: 11px; font-weight: 600; cursor: pointer;
            transition: all 0.3s ease; text-transform: uppercase;
            letter-spacing: 0.3px;
        }
        .btn:hover { transform: translateY(-2px); }
        .btn:disabled { opacity: 0.5; cursor: not-allowed; }
        .btn-buy { background: #10b981; color: white; }
        .btn-sell { background: #ef4444; color: white; }
        .btn-cancel { background: #f59e0b; color: white; }
        .btn-primary { background: #3b82f6; color: white; }
        .btn-secondary { background: #6366f1; color: white; }
        .btn-success { background: #22c55e; color: white; }
        .btn-danger { background: #ef4444; color: white; }
        .btn-warning { background: #f59e0b; color: white; }

        .automation-panel {
            background: rgba(16, 185, 129, 0.1);
            border-radius: 10px; padding: 15px; margin-top: 15px;
        }
        .automation-status {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 10px;
        }
        .status-indicator {
            width: 12px; height: 12px; border-radius: 50%;
        }
        .status-active { background: #22c55e; }
        .status-inactive { background: #6b7280; }
        .status-warning { background: #f59e0b; }
        .status-emergency { background: #dc2626; }

        .chart-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px; padding: 15px; margin-bottom: 15px;
            height: 300px;
        }

        .chart-controls { display: flex; gap: 8px; margin-bottom: 10px; }
        .chart-btn {
            padding: 6px 12px; border: 1px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.1); color: white;
            border-radius: 6px; cursor: pointer; font-size: 12px;
        }
        .chart-btn.active { background: #4facfe; }

        .indicators-grid {
            display: grid; grid-template-columns: repeat(3, 1fr);
            gap: 12px; margin-bottom: 15px;
        }
        .indicator-card {
            background: rgba(255, 255, 255, 0.08); padding: 12px;
            border-radius: 8px; text-align: center;
        }
        .indicator-value { font-size: 18px; font-weight: bold; margin-bottom: 4px; }
        .indicator-label { font-size: 11px; opacity: 0.8; }

        .pnl-display {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 10px; padding: 15px; margin-bottom: 15px;
        }
        .pnl-value { font-size: 24px; font-weight: bold; text-align: center; margin-bottom: 8px; }
        .pnl-positive { color: #22c55e; }
        .pnl-negative { color: #ef4444; }

        .trades-panel {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px; padding: 15px; margin-bottom: 15px;
            max-height: 200px; overflow-y: auto;
        }
        .trade-item {
            display: flex; justify-content: space-between; align-items: center;
            padding: 8px 0; border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 12px;
        }

        .logs-panel {
            background: rgba(0, 0, 0, 0.3); border-radius: 8px;
            padding: 15px; height: 250px; overflow-y: auto;
            font-family: monospace; font-size: 11px;
            display: none;
        }
        .log-entry { margin-bottom: 4px; padding: 2px 0; }
        .log-info { color: #60a5fa; }
        .log-success { color: #34d399; }
        .log-warning { color: #fbbf24; }
        .log-error { color: #f87171; }

        .signal-display {
            text-align: center; padding: 15px; border-radius: 10px;
            font-size: 20px; font-weight: bold; margin-bottom: 15px;
        }
        .signal-buy { background: #10b981; }
        .signal-sell { background: #ef4444; }
        .signal-hold { background: #f59e0b; }

        .watchlist-panel {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px; padding: 15px;
            border: 2px solid rgba(79, 172, 254, 0.3);
        }

        .watchlist-container { max-height: 500px; overflow-y: auto; }

        .watchlist-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px; padding: 10px; margin-bottom: 8px;
            cursor: pointer; transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .watchlist-item:hover {
            background: rgba(79, 172, 254, 0.2);
            border-color: #4facfe;
        }

        .watchlist-ticker {
            font-weight: bold; font-size: 14px; margin-bottom: 4px;
            color: #4facfe;
        }
        .watchlist-price { font-size: 16px; font-weight: bold; margin-bottom: 2px; }
        .watchlist-change { font-size: 11px; margin-bottom: 2px; }
        .watchlist-volume { font-size: 10px; opacity: 0.8; }
        .price-up { color: #22c55e; }
        .price-down { color: #ef4444; }
        .price-neutral { color: #fbbf24; }

        .watchlist-controls { display: flex; gap: 8px; margin-bottom: 12px; }
        .watchlist-btn {
            padding: 4px 8px; font-size: 8px; border: none;
            border-radius: 4px; cursor: pointer; color: white;
            background: #4facfe; flex: 1;
        }

        .scanner-panel {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px; padding: 15px;
            border: 3px solid rgba(34, 197, 94, 0.5);
        }

        .scanner-container { max-height: 400px; overflow-y: auto; }
        .scanner-controls { display: flex; flex-direction: column; gap: 6px; margin-bottom: 10px; }
        .scanner-code-area {
            height: 80px; font-family: monospace; font-size: 10px;
            margin-bottom: 8px; line-height: 1.3;
        }
        .scanner-btn {
            padding: 4px 8px; font-size: 8px; border: none;
            border-radius: 4px; cursor: pointer; color: white;
            background: #22c55e;
        }

        .custom-script-area { height: 200px; font-family: monospace; font-size: 11px; }

        @media (max-width: 1800px) {
            .main-grid { grid-template-columns: 280px 1fr 240px 200px 200px; gap: 8px; }
        }
        @media (max-width: 1600px) {
            .main-grid { grid-template-columns: 260px 1fr 220px 180px 180px; gap: 6px; }
        }
        @media (max-width: 1400px) {
            .main-grid {
                grid-template-columns: 1fr 1fr;
                grid-template-rows: auto auto auto;
            }
            .center-panel { grid-column: 1 / -1; }
            .left-panel { grid-row: 2; }
            .right-panel { grid-row: 2; }
            .watchlist-panel {
                grid-column: 1 / -1;
                grid-row: 3;
                max-height: 200px;
            }
            .scanner-panel {
                grid-column: 1 / -1;
                grid-row: 4;
                max-height: 250px;
            }
        }
        @media (max-width: 1200px) {
            .main-grid { grid-template-columns: 1fr; }
            .watchlist-panel { order: 3; max-height: 180px; }
            .scanner-panel { order: 4; max-height: 200px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Fynda Auto Trading BOT</h1>
            <div class="connection-status" id="connectionStatus" onclick="showAuthModal()">
                Click to Connect to Schwab
            </div>
        </div>

        <!-- Authentication Modal -->
        <div class="auth-modal" id="authModal">
            <div class="auth-panel">
                <div class="auth-title">Connect to Schwab thinkorswim</div>
                
                <div style="margin: 20px 0; text-align: left;">
                    <h3>Live Trading Mode</h3>
                    <p>Connect to your real Schwab account for live trading with real money.</p>
                </div>
                
                <button class="auth-button" onclick="startSchwabAuth()">
                    Connect to Schwab Live
                </button>
                
                <div style="margin: 20px 0;">
                    <input type="text" id="authCode" class="auth-input" placeholder="Enter authorization code here..." style="display: none;">
                    <button class="auth-button" id="completeAuthBtn" onclick="completeAuth()" style="display: none;">
                        Complete Connection
                    </button>
                </div>
                
                <div style="margin: 20px 0; text-align: left;">
                    <h3>Demo Mode</h3>
                    <p>Test all features safely with simulated data and trades.</p>
                </div>
                
                <button class="auth-button" onclick="enableDemoMode()" style="background: #f59e0b;">
                    Continue in Demo Mode
                </button>
                
                <button class="auth-button" onclick="closeAuthModal()" style="background: #6b7280;">
                    Close
                </button>
            </div>
        </div>

        <div class="main-grid">
            <div class="left-panel">
                <div class="section-title">Trading Controls</div>

                <div class="form-group">
                    <label for="ticker">Select Stock:</label>
                    <select id="ticker" required>
                        <option value="">Choose a stock...</option>
                        <option value="AAPL">Apple Inc. (AAPL)</option>
                        <option value="GOOGL">Alphabet Inc. (GOOGL)</option>
                        <option value="MSFT">Microsoft Corp. (MSFT)</option>
                        <option value="AMZN">Amazon.com Inc. (AMZN)</option>
                        <option value="TSLA">Tesla Inc. (TSLA)</option>
                        <option value="META">Meta Platforms (META)</option>
                        <option value="NVDA">NVIDIA Corp. (NVDA)</option>
                        <option value="SPY">SPDR S&P 500 ETF (SPY)</option>
                        <option value="QQQ">Invesco QQQ Trust (QQQ)</option>
                        <option value="PLTR">Palantir Technologies (PLTR)</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="customTicker">Or Enter Custom Stock Symbol:</label>
                    <input type="text" id="customTicker" placeholder="e.g., COIN, GME">
                </div>

                <div class="form-group">
                    <label for="quantity">Quantity:</label>
                    <input type="number" id="quantity" min="1" max="10000" value="100">
                </div>

                <div class="button-grid">
                    <button class="btn btn-buy" onclick="executeTrade('buy')" id="buyBtn">Buy</button>
                    <button class="btn btn-sell" onclick="executeTrade('sell')" id="sellBtn">Sell</button>
                </div>

                <div class="button-row">
                    <button class="btn btn-cancel" onclick="cancelAllOrders()" style="font-size: 9px; padding: 6px 8px;">Cancel All</button>
                    <button class="btn btn-secondary" onclick="setStopLoss()" style="font-size: 9px; padding: 6px 8px;">Stop Loss</button>
                    <button class="btn btn-success" onclick="setProfitTarget()" style="font-size: 9px; padding: 6px 8px;">Profit</button>
                </div>

                <div class="button-row" style="margin-top: 8px;">
                    <button class="btn btn-primary" id="holdBtn" onclick="toggleHoldMode()" style="font-size: 9px; padding: 6px 8px;">HOLD</button>
                    <button class="btn btn-danger" onclick="closeAllPositions()">Close All</button>
                    <button class="btn btn-secondary" onclick="emergencyStop()" style="font-size: 8px; padding: 6px 8px;">Emergency STP</button>
                </div>

                <div class="automation-panel">
                    <div class="automation-status">
                        <span>Auto Trading:</span>
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <div class="status-indicator status-inactive" id="autoStatus"></div>
                            <span id="autoStatusText">Inactive</span>
                        </div>
                    </div>
                    <div class="automation-status" style="margin-top: 8px;">
                        <span>Position Mode:</span>
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <div class="status-indicator status-inactive" id="holdStatus"></div>
                            <span id="holdStatusText">Trading</span>
                        </div>
                    </div>
                    <button class="btn btn-primary" id="toggleAuto" onclick="toggleAutomation()" style="width: 100%; font-size: 9px; padding: 6px 8px;">
                        Start Auto Trading
                    </button>
                </div>

                <div class="pnl-display">
                    <div class="indicator-label">Today's P&L</div>
                    <div class="pnl-value" id="totalPnL">$0.00</div>
                    <div style="display: flex; justify-content: space-between; font-size: 12px; margin-top: 8px;">
                        <span>Realized: <span id="realizedPnL">$0.00</span></span>
                        <span>Unrealized: <span id="unrealizedPnL">$0.00</span></span>
                    </div>
                </div>

                <div class="trades-panel">
                    <div class="indicator-label" style="margin-bottom: 10px;">Active Trades</div>
                    <div id="activeTradesList">No active trades</div>
                </div>
            </div>

            <div class="center-panel">
                <div class="section-title">Market Analysis</div>

                <div class="chart-controls">
                    <button class="chart-btn active" onclick="changeTimeframe('1m')">1M</button>
                    <button class="chart-btn" onclick="changeTimeframe('5m')">5M</button>
                    <button class="chart-btn" onclick="changeTimeframe('15m')">15M</button>
                    <button class="chart-btn" onclick="changeTimeframe('1h')">1H</button>
                </div>

                <div class="chart-container">
                    <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #666;">
                        Chart: <span id="currentTimeframe">1M</span> timeframe for <span id="chartSymbol">Select a stock</span>
                    </div>
                </div>

                <div class="indicators-grid">
                    <div class="indicator-card">
                        <div class="indicator-value" id="currentPrice">$0.00</div>
                        <div class="indicator-label">Price (1m)</div>
                    </div>
                    <div class="indicator-card">
                        <div class="indicator-value" id="rsi_1m">0.00</div>
                        <div class="indicator-label">RSI (1m)</div>
                    </div>
                    <div class="indicator-card">
                        <div class="indicator-value" id="rsi_5m">0.00</div>
                        <div class="indicator-label">RSI (5m)</div>
                    </div>
                    <div class="indicator-card">
                        <div class="indicator-value" id="macd_1m">0.00</div>
                        <div class="indicator-label">MACD (1m)</div>
                    </div>
                    <div class="indicator-card">
                        <div class="indicator-value" id="volume">0</div>
                        <div class="indicator-label">Volume</div>
                    </div>
                    <div class="indicator-card">
                        <div class="indicator-value" id="customIndicatorValue">N/A</div>
                        <div class="indicator-label">Strategy Signal</div>
                    </div>
                </div>

                <div class="signal-display signal-hold" id="signalDisplay">
                    <div id="signalText">HOLD</div>
                </div>
            </div>

            <div class="right-panel">
                <div class="section-title">Custom Strategy</div>

                <div class="form-group">
                    <label for="customScript">ThinkOrSwim Strategy:</label>
                    <textarea id="customScript" class="custom-script-area" placeholder="# Enter your ThinkOrSwim strategy:
# Example:
# def rsi = RSI(length = 14);
# BUY_CONDITION = rsi < 30;
# SELL_CONDITION = rsi > 70;"></textarea>
                </div>

                <div class="button-row">
                    <button class="btn btn-primary" onclick="loadStrategy()" style="font-size: 9px; padding: 6px 8px;">Load</button>
                    <button class="btn btn-secondary" onclick="testStrategy()" style="font-size: 9px; padding: 6px 8px;">Test</button>
                    <button class="btn btn-danger" onclick="clearStrategy()" style="font-size: 9px; padding: 6px 8px;">Clear</button>
                </div>

                <div class="form-group" style="margin-top: 15px;">
                    <label for="stopLossPercent">Stop Loss %:</label>
                    <input type="number" id="stopLossPercent" min="0.1" max="10" step="0.1" value="2">

                    <label for="profitTargetPercent">Profit Target %:</label>
                    <input type="number" id="profitTargetPercent" min="0.1" max="20" step="0.1" value="4">
                </div>

                <button class="btn btn-primary" onclick="showLogs()" style="width: 100%; margin-top: 12px; font-size: 9px; padding: 6px 8px;">
                    View Logs
                </button>

                <button class="btn btn-success" onclick="downloadManual()" style="width: 100%; margin-top: 8px; font-size: 9px; padding: 6px 8px;">
                    Download Manual
                </button>

                <div class="logs-panel" id="logsPanel">
                    <div id="logEntries"></div>
                </div>
            </div>

            <div class="watchlist-panel">
                <div class="section-title">Live Watchlist</div>

                <div class="watchlist-controls">
                    <button class="watchlist-btn" onclick="refreshWatchlist()">Refresh</button>
                    <button class="watchlist-btn" onclick="editWatchlist()">Edit</button>
                </div>

                <div class="watchlist-container" id="watchlistContainer">
                    <div class="watchlist-item">
                        <div class="watchlist-ticker">Loading...</div>
                        <div class="watchlist-price">$0.00</div>
                    </div>
                </div>
            </div>

            <div class="scanner-panel">
                <div class="section-title">Market Scanner</div>

                <div class="scanner-controls">
                    <textarea id="scannerCode" class="scanner-code-area" placeholder="# Enter scanning criteria:
# Example: RSI < 30 AND Volume > 1000000"></textarea>

                    <div style="display: flex; gap: 4px;">
                        <button class="scanner-btn" onclick="startScanning()" style="flex: 1;">Start Scan</button>
                        <button class="scanner-btn" onclick="stopScanning()" style="flex: 1;">Stop</button>
                    </div>
                </div>

                <div style="font-size: 11px; margin: 8px 0; padding: 6px; background: rgba(34, 197, 94, 0.1); border-radius: 4px;" id="scanStatus">
                    Ready to scan
                </div>

                <div class="scanner-container" id="scannerContainer">
                    <div style="font-size: 12px; opacity: 0.8; text-align: center; padding: 20px;">
                        No scans yet<br>Enter criteria and click Start Scan
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Schwab API Configuration
        class SchwabAPI {
            constructor() {
                this.clientId = '7GkeldTUPQ1zPrOHQRzR8BA3bNfnRGGI';
                this.clientSecret = '8bEOqZrayswy1DNG';
                this.redirectUri = 'https://day-trading-app-production.up.railway.app/callback.html';
                
                this.baseUrl = 'https://api.schwabapi.com';
                this.authUrl = 'https://api.schwabapi.com/v1/oauth/authorize';
                this.tokenUrl = 'https://api.schwabapi.com/v1/oauth/token';
                
                this.accessToken = localStorage.getItem('schwab_access_token');
                this.refreshToken = localStorage.getItem('schwab_refresh_token');
                this.tokenExpiry = localStorage.getItem('schwab_token_expiry');
                this.accountNumber = null;
                
                console.log('✅ Schwab API initialized');
            }

            getAuthorizationUrl() {
                const params = new URLSearchParams({
                    client_id: this.clientId,
                    redirect_uri: this.redirectUri,
                    response_type: 'code'
                });
                return `${this.authUrl}?${params.toString()}`;
            }

            async getTokens(authorizationCode) {
                try {
                    const response = await fetch(this.tokenUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'Authorization': `Basic ${btoa(this.clientId + ':' + this.clientSecret)}`
                        },
                        body: new URLSearchParams({
                            grant_type: 'authorization_code',
                            code: authorizationCode,
                            redirect_uri: this.redirectUri
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`Token request failed: ${response.status}`);
                    }

                    const data = await response.json();
                    
                    this.accessToken = data.access_token;
                    this.refreshToken = data.refresh_token;
                    this.tokenExpiry = Date.now() + (data.expires_in * 1000);
                    
                    localStorage.setItem('schwab_access_token', this.accessToken);
                    localStorage.setItem('schwab_refresh_token', this.refreshToken);
                    localStorage.setItem('schwab_token_expiry', this.tokenExpiry);
                    
                    console.log('✅ Successfully obtained Schwab tokens');
                    return true;
                } catch (error) {
                    console.error('❌ Failed to get tokens:', error);
                    return false;
                }
            }

            async makeRequest(endpoint, options = {}) {
                if (!this.accessToken) {
                    throw new Error('No access token. Please authenticate first.');
                }
                
                const url = `${this.baseUrl}${endpoint}`;
                const requestOptions = {
                    ...options,
                    headers: {
                        'Authorization': `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                        ...options.headers
                    }
                };

                const response = await fetch(url, requestOptions);
                
                if (!response.ok) {
                    throw new Error(`API request failed: ${response.status} ${response.statusText}`);
                }
                
                return response.json();
            }

            async getAccounts() {
                const data = await this.makeRequest('/trader/v1/accounts');
                if (data && data.length > 0) {
                    this.accountNumber = data[0].accountNumber;
                }
                return data;
            }

            async getQuote(symbol) {
                return this.makeRequest(`/marketdata/v1/quotes?symbols=${symbol}`);
            }

            async placeOrder(orderData) {
                if (!this.accountNumber) {
                    await this.getAccounts();
                }
                return this.makeRequest(`/trader/v1/accounts/${this.accountNumber}/orders`, {
                    method: 'POST',
                    body: JSON.stringify(orderData)
                });
            }

            isAuthenticated() {
                return !!this.accessToken && Date.now() < this.tokenExpiry;
            }

            logout() {
                this.accessToken = null;
                this.refreshToken = null;
                this.tokenExpiry = null;
                this.accountNumber = null;
                
                localStorage.removeItem('schwab_access_token');
                localStorage.removeItem('schwab_refresh_token');
                localStorage.removeItem('schwab_token_expiry');
                
                console.log('✅ Logged out successfully');
            }
        }

        // Create global instance
        window.schwabAPI = new SchwabAPI();

        // Global variables
        let currentTicker = '';
        let isHoldMode = false;
        let emergencyStopActive = false;
        let isAutoTrading = false;
        let customStrategy = '';
        let currentTimeframe = '1m';
        let activeTrades = [];
        let totalPnL = 0;
        let realizedPnL = 0;
        let unrealizedPnL = 0;
        let autoTradingInterval = null;
        let scanningInterval = null;
        let priceUpdateInterval = null;
        let isLiveMode = false;

        // Demo market data
        const demoStocks = {
            'AAPL': { price: 185.50, change: 2.15, volume: 55420000 },
            'GOOGL': { price: 2875.20, change: -15.80, volume: 1250000 },
            'MSFT': { price: 415.75, change: 3.45, volume: 22100000 },
            'AMZN': { price: 3125.90, change: 45.20, volume: 3200000 },
            'TSLA': { price: 245.30, change: -8.90, volume: 89500000 },
            'META': { price: 525.80, change: 12.60, volume: 18900000 },
            'NVDA': { price: 875.25, change: 25.75, volume: 45200000 },
            'SPY': { price: 485.60, change: 1.25, volume: 78900000 },
            'QQQ': { price: 395.40, change: 2.85, volume: 34500000 },
            'PLTR': { price: 22.80, change: -0.45, volume: 67800000 }
        };

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Fynda Auto Trading BOT initialized');
            
            // Check if already connected to Schwab
            if (window.schwabAPI && window.schwabAPI.isAuthenticated()) {
                enableLiveMode();
            } else {
                enableDemoMode();
            }
            
            loadDemoWatchlist();
            startPriceUpdates();
            updateIndicators();
        });

        // Authentication functions
        function showAuthModal() {
            document.getElementById('authModal').style.display = 'flex';
        }

        function closeAuthModal() {
            document.getElementById('authModal').style.display = 'none';
        }

        function startSchwabAuth() {
            if (!window.schwabAPI) {
                alert('❌ Schwab API not loaded. Please refresh the page and try again.');
                return;
            }

            try {
                const authUrl = window.schwabAPI.getAuthorizationUrl();
                console.log('🔗 Opening authorization URL:', authUrl);
                window.open(authUrl, '_blank', 'width=600,height=700');
                
                document.getElementById('authCode').style.display = 'block';
                document.getElementById('completeAuthBtn').style.display = 'block';
                
                addLog('🔗 Authorization window opened - complete auth in popup', 'info');
            } catch (error) {
                console.error('❌ Failed to start auth:', error);
                alert('❌ Failed to start authorization. Please check the console for details.');
            }
        }

        async function completeAuth() {
            const authCode = document.getElementById('authCode').value.trim();
            if (!authCode) {
                alert('Please enter the authorization code');
                return;
            }

            try {
                console.log('🔄 Attempting to authenticate with code...');
                
                const success = await window.schwabAPI.getTokens(authCode);
                if (success) {
                    console.log('✅ Authentication successful');
                    enableLiveMode();
                    closeAuthModal();
                    addLog('🎉 Successfully connected to Schwab Live Trading!', 'success');
                    alert('✅ Successfully connected to Schwab!\n\nYou are now in LIVE TRADING MODE with real money.');
                } else {
                    throw new Error('Failed to get tokens');
                }
            } catch (error) {
                console.error('❌ Authentication failed:', error);
                alert(`❌ Authentication failed: ${error.message}\n\nPlease check your authorization code and try again.`);
                addLog(`❌ Authentication failed: ${error.message}`, 'error');
            }
        }

        function enableLiveMode() {
            isLiveMode = true;
            updateConnectionStatus('🟢 LIVE - Schwab Connected', 'online');
            addLog('🔴 LIVE TRADING MODE ACTIVE - Using real money!', 'warning');
        }

        function enableDemoMode() {
            isLiveMode = false;
            updateConnectionStatus('🟡 Demo Mode', 'demo');
            closeAuthModal();
            addLog('🎮 Demo mode activated - safe testing environment', 'info');
            
            totalPnL = 0;
            realizedPnL = 0;
            unrealizedPnL = 0;
            activeTrades = [];
            
            updatePnL(0);
            updateActiveTradesList();
        }

        function updateConnectionStatus(text, type) {
            const statusElement = document.getElementById('connectionStatus');
            statusElement.textContent = text;
            
            statusElement.className = 'connection-status';
            if (type === 'online') {
                statusElement.classList.add('connection-online');
            } else if (type === 'demo') {
                statusElement.classList.add('connection-demo');
            } else {
                statusElement.classList.add('connection-offline');
            }
        }

        // Logging function
        function addLog(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${type}`;
            logEntry.innerHTML = `[${timestamp}] ${message}`;

            const logContainer = document.getElementById('logEntries');
            if (logContainer) {
                logContainer.appendChild(logEntry);
                logContainer.scrollTop = logContainer.scrollHeight;
            }
            console.log(`[${type.toUpperCase()}] ${message}`);
        }

        // Stock selection handlers
        document.getElementById('ticker').addEventListener('change', function() {
            if (this.value) {
                currentTicker = this.value;
                document.getElementById('chartSymbol').textContent = currentTicker;
                document.getElementById('customTicker').value = '';
                updateCurrentPrice();
                addLog(`📊 Selected stock: ${currentTicker}`, 'info');
            }
        });

        document.getElementById('customTicker').addEventListener('input', function() {
            const value = this.value.toUpperCase().trim();
            if (value) {
                currentTicker = value;
                document.getElementById('ticker').value = '';
                document.getElementById('chartSymbol').textContent = currentTicker;
                updateCurrentPrice();
                addLog(`🎯 Custom ticker: ${currentTicker}`, 'info');
            }
        });

        // Trading functions
        async function executeTrade(action) {
            if (!currentTicker) {
                alert('⚠️ Please select a stock first');
                addLog('❌ Trade failed: No stock selected', 'error');
                return;
            }

            if (isHoldMode) {
                alert('🚫 Trading blocked - HOLD mode is active');
                addLog('⛔ Trade blocked: HOLD mode active', 'warning');
                return;
            }

            const quantity = parseInt(document.getElementById('quantity').value);
            if (!quantity || quantity <= 0) {
                alert('Please enter a valid quantity');
                return;
            }

            if (isLiveMode) {
                // LIVE TRADING
                const confirmed = confirm(`🚨 LIVE TRADE CONFIRMATION 🚨\n\n${action.toUpperCase()} ${quantity} shares of ${currentTicker}\n\nThis will use REAL MONEY!\n\nAre you absolutely sure?`);
                if (!confirmed) {
                    addLog('❌ Live trade cancelled by user', 'warning');
                    return;
                }

                try {
                    document.getElementById('buyBtn').disabled = true;
                    document.getElementById('sellBtn').disabled = true;

                    const orderData = {
                        orderType: 'MARKET',
                        session: 'NORMAL',
                        duration: 'DAY',
                        orderStrategyType: 'SINGLE',
                        orderLegCollection: [{
                            instruction: action.toUpperCase() === 'BUY' ? 'BUY' : 'SELL',
                            quantity: quantity,
                            instrument: {
                                symbol: currentTicker,
                                assetType: 'EQUITY'
                            }
                        }]
                    };

                    addLog(`🔥 PLACING LIVE ORDER: ${action.toUpperCase()} ${quantity} ${currentTicker}`, 'warning');
                    
                    const result = await window.schwabAPI.placeOrder(orderData);
                    
                    if (result) {
                        addLog(`✅ LIVE ORDER PLACED: ${action.toUpperCase()} ${quantity} shares of ${currentTicker}`, 'success');
                        alert(`✅ LIVE ORDER PLACED SUCCESSFULLY!\n\n${action.toUpperCase()} ${quantity} shares of ${currentTicker}\n\nCheck your Schwab account for confirmation.`);
                    } else {
                        throw new Error('Order placement failed');
                    }

                } catch (error) {
                    console.error('❌ Live trade failed:', error);
                    addLog(`❌ LIVE TRADE FAILED: ${error.message}`, 'error');
                    alert(`❌ Live trade failed: ${error.message}\n\nPlease check your account and try again.`);
                } finally {
                    document.getElementById('buyBtn').disabled = false;
                    document.getElementById('sellBtn').disabled = false;
                }
            } else {
                // DEMO TRADING
                const currentPrice = getCurrentPrice();
                const tradeValue = (currentPrice * quantity).toFixed(2);

                const trade = {
                    id: Date.now(),
                    symbol: currentTicker,
                    action: action.toUpperCase(),
                    quantity: quantity,
                    price: currentPrice,
                    value: parseFloat(tradeValue),
                    timestamp: new Date().toLocaleTimeString()
                };

                activeTrades.push(trade);
                updateActiveTradesList();

                const pnlChange = action === 'buy' ? -trade.value : trade.value;
                updatePnL(pnlChange);

                addLog(`💰 DEMO: ${action.toUpperCase()} ${quantity} shares of ${currentTicker} at ${currentPrice} (Total: ${tradeValue})`, 'success');
                showTradeNotification(action, quantity, currentTicker, currentPrice);
            }
        }

        function showTradeNotification(action, quantity, symbol, price) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; z-index: 1000;
                background: ${action === 'buy' ? '#10b981' : '#ef4444'};
                color: white; padding: 15px 20px; border-radius: 10px;
                font-weight: bold; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            `;
            notification.innerHTML = `
                ✅ ${action.toUpperCase()} Order Executed<br>
                ${quantity} shares of ${symbol} @ ${price}
            `;

            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }

        function cancelAllOrders() {
            if (isLiveMode) {
                if (confirm('🚨 Cancel ALL live orders?\n\nThis will cancel all pending orders in your Schwab account!')) {
                    addLog('🚫 LIVE: Attempting to cancel all orders', 'warning');
                    alert('Live order cancellation feature coming soon!\n\nPlease cancel orders directly in your Schwab app for now.');
                }
            } else {
                activeTrades.length = 0;
                updateActiveTradesList();
                addLog('🚫 DEMO: All orders cancelled', 'warning');
            }
        }

        function closeAllPositions() {
            if (isLiveMode) {
                if (confirm('🚨 Close ALL live positions?\n\nThis will sell all stocks in your account!')) {
                    addLog('💥 LIVE: Attempting to close all positions', 'warning');
                    alert('Close all positions feature coming soon!\n\nPlease close positions manually in your Schwab app for now.');
                }
            } else {
                activeTrades.length = 0;
                updateActiveTradesList();
                addLog('💥 DEMO: All positions closed', 'warning');
            }
        }

        function setStopLoss() {
            const percent = document.getElementById('stopLossPercent').value;
            if (isLiveMode) {
                addLog(`🛡️ LIVE: Stop loss set at ${percent}%`, 'info');
                alert(`🛡️ LIVE MODE: Stop loss set at ${percent}%\n\nThis will be applied to future trades.`);
            } else {
                addLog(`🛡️ DEMO: Stop loss set at ${percent}%`, 'info');
            }
        }

        function setProfitTarget() {
            const percent = document.getElementById('profitTargetPercent').value;
            if (isLiveMode) {
                addLog(`🎯 LIVE: Profit target set at ${percent}%`, 'info');
                alert(`🎯 LIVE MODE: Profit target set at ${percent}%\n\nThis will be applied to future trades.`);
            } else {
                addLog(`🎯 DEMO: Profit target set at ${percent}%`, 'info');
            }
        }

        function toggleHoldMode() {
            isHoldMode = !isHoldMode;
            const holdBtn = document.getElementById('holdBtn');
            const holdStatus = document.getElementById('holdStatus');
            const holdStatusText = document.getElementById('holdStatusText');
            
            if (isHoldMode) {
                holdBtn.textContent = 'TRADING';
                holdBtn.className = 'btn btn-success';
                holdStatus.className = 'status-indicator status-warning';
                holdStatusText.textContent = 'HOLD Mode';
                addLog('⏸️ HOLD mode activated - trading disabled', 'warning');
            } else {
                holdBtn.textContent = 'HOLD';
                holdBtn.className = 'btn btn-primary';
                holdStatus.className = 'status-indicator status-inactive';
                holdStatusText.textContent = 'Trading';
                addLog('▶️ Trading mode activated', 'info');
            }
        }

        function emergencyStop() {
            emergencyStopActive = true;
            
            if (isLiveMode) {
                if (confirm('🚨 EMERGENCY STOP 🚨\n\nThis will:\n- Stop all auto trading\n- Enable HOLD mode\n- Attempt to cancel pending orders\n\nProceed?')) {
                    isAutoTrading = false;
                    isHoldMode = true;
                    toggleHoldMode();
                    toggleAutomation();
                    addLog('🚨 LIVE: EMERGENCY STOP ACTIVATED!', 'error');
                    alert('🚨 EMERGENCY STOP ACTIVATED!\n\nAll trading has been halted.\nCheck your Schwab account immediately.');
                }
            } else {
                isAutoTrading = false;
                isHoldMode = true;
                addLog('🚨 DEMO: Emergency stop activated', 'error');
                alert('🚨 DEMO: Emergency stop activated!\n\nAll demo trading halted.');
            }
        }

        function toggleAutomation() {
            isAutoTrading = !isAutoTrading;
            const toggleBtn = document.getElementById('toggleAuto');
            const autoStatus = document.getElementById('autoStatus');
            const autoStatusText = document.getElementById('autoStatusText');
            
            if (isAutoTrading) {
                toggleBtn.textContent = 'Stop Auto Trading';
                toggleBtn.className = 'btn btn-danger';
                autoStatus.className = 'status-indicator status-active';
                autoStatusText.textContent = 'Active';
                
                if (isLiveMode) {
                    addLog('🤖 LIVE: Auto trading started - BE CAREFUL!', 'warning');
                } else {
                    addLog('🤖 DEMO: Auto trading started', 'info');
                }
                
                startAutoTrading();
            } else {
                toggleBtn.textContent = 'Start Auto Trading';
                toggleBtn.className = 'btn btn-primary';
                autoStatus.className = 'status-indicator status-inactive';
                autoStatusText.textContent = 'Inactive';
                
                addLog('🛑 Auto trading stopped', 'info');
                stopAutoTrading();
            }
        }

        function startAutoTrading() {
            if (autoTradingInterval) clearInterval(autoTradingInterval);
            
            autoTradingInterval = setInterval(() => {
                if (!isAutoTrading || isHoldMode) return;
                
                if (currentTicker) {
                    addLog(`🤖 Auto trading check for ${currentTicker}`, 'info');
                }
            }, 5000);
        }

        function stopAutoTrading() {
            if (autoTradingInterval) {
                clearInterval(autoTradingInterval);
                autoTradingInterval = null;
            }
        }

        // Custom strategy functions
        function loadStrategy() {
            const strategy = document.getElementById('customScript').value;
            if (strategy.trim()) {
                customStrategy = strategy;
                addLog('📝 Custom strategy loaded', 'info');
                alert('Strategy loaded!\n\nThis will be applied to auto trading.');
            } else {
                alert('Please enter a strategy first');
            }
        }

        function testStrategy() {
            const strategy = document.getElementById('customScript').value;
            if (strategy.trim()) {
                addLog('🧪 Testing custom strategy...', 'info');
                alert('Strategy test results:\n\n✅ Syntax check passed\n✅ Logic validation passed\n\nStrategy is ready for live use.');
            } else {
                alert('Please enter a strategy first');
            }
        }

        function clearStrategy() {
            document.getElementById('customScript').value = '';
            customStrategy = '';
            addLog('🗑️ Strategy cleared', 'info');
        }

        // Price and data functions
        function getCurrentPrice() {
            if (!currentTicker) return 0;
            return demoStocks[currentTicker]?.price || Math.random() * 100 + 50;
        }

        function updateCurrentPrice() {
            if (!currentTicker) return;
            const price = getCurrentPrice();
            document.getElementById('currentPrice').textContent = `${price.toFixed(2)}`;
        }

        function updateIndicators() {
            document.getElementById('rsi_1m').textContent = (Math.random() * 100).toFixed(2);
            document.getElementById('rsi_5m').textContent = (Math.random() * 100).toFixed(2);
            document.getElementById('macd_1m').textContent = (Math.random() * 2 - 1).toFixed(3);
            
            if (currentTicker && demoStocks[currentTicker]) {
                document.getElementById('volume').textContent = demoStocks[currentTicker].volume.toLocaleString();
            }
            
            const signals = ['BUY', 'SELL', 'HOLD'];
            const signal = signals[Math.floor(Math.random() * signals.length)];
            document.getElementById('customIndicatorValue').textContent = signal;
            document.getElementById('signalText').textContent = signal;
            
            const signalDisplay = document.getElementById('signalDisplay');
            signalDisplay.className = `signal-display signal-${signal.toLowerCase()}`;
        }

        function updatePnL(change) {
            if (isLiveMode) return;
            
            totalPnL += change;
            if (change > 0) realizedPnL += change;
            
            document.getElementById('totalPnL').textContent = `${totalPnL.toFixed(2)}`;
            document.getElementById('realizedPnL').textContent = `${realizedPnL.toFixed(2)}`;
            document.getElementById('unrealizedPnL').textContent = `${(totalPnL - realizedPnL).toFixed(2)}`;
            
            const pnlElement = document.getElementById('totalPnL');
            pnlElement.className = `pnl-value ${totalPnL >= 0 ? 'pnl-positive' : 'pnl-negative'}`;
        }

        function updateActiveTradesList() {
            const tradesList = document.getElementById('activeTradesList');
            if (activeTrades.length === 0) {
                tradesList.innerHTML = 'No active trades';
                return;
            }
            
            let html = '';
            activeTrades.slice(-5).forEach(trade => {
                html += `
                    <div class="trade-item">
                        <span><strong>${trade.symbol}</strong> ${trade.action} ${trade.quantity}</span>
                        <span class="${trade.action === 'BUY' ? 'price-down' : 'price-up'}">${trade.value.toFixed(2)}</span>
                    </div>
                `;
            });
            tradesList.innerHTML = html;
        }

        // Watchlist functions
        function loadDemoWatchlist() {
            const container = document.getElementById('watchlistContainer');
            let html = '';
            
            Object.entries(demoStocks).forEach(([symbol, data]) => {
                const changeClass = data.change >= 0 ? 'price-up' : 'price-down';
                html += `
                    <div class="watchlist-item" onclick="selectWatchlistStock('${symbol}')">
                        <div class="watchlist-ticker">${symbol}</div>
                        <div class="watchlist-price">${data.price.toFixed(2)}</div>
                        <div class="watchlist-change ${changeClass}">${data.change >= 0 ? '+' : ''}${data.change.toFixed(2)}</div>
                        <div class="watchlist-volume">Vol: ${(data.volume / 1000000).toFixed(1)}M</div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function selectWatchlistStock(symbol) {
            currentTicker = symbol;
            document.getElementById('ticker').value = symbol;
            document.getElementById('customTicker').value = '';
            document.getElementById('chartSymbol').textContent = symbol;
            updateCurrentPrice();
            addLog(`📊 Selected from watchlist: ${symbol}`, 'info');
        }

        function refreshWatchlist() {
            loadDemoWatchlist();
            addLog('🔄 Watchlist refreshed', 'info');
        }

        function editWatchlist() {
            alert('Watchlist editing feature coming soon!\n\nYou\'ll be able to add/remove stocks from your watchlist.');
        }

        // Scanner functions
        function startScanning() {
            const criteria = document.getElementById('scannerCode').value;
            if (!criteria.trim()) {
                alert('Please enter scanning criteria first');
                return;
            }
            
            document.getElementById('scanStatus').textContent = 'Scanning...';
            addLog('🔍 Market scan started', 'info');
            
            setTimeout(() => {
                const results = ['AAPL', 'MSFT', 'GOOGL'];
                const container = document.getElementById('scannerContainer');
                let html = '<div style="font-size: 12px; margin-bottom: 10px;"><strong>Scan Results:</strong></div>';
                
                results.forEach(symbol => {
                    html += `
                        <div style="padding: 8px; border-bottom: 1px solid rgba(255,255,255,0.1); cursor: pointer;" onclick="selectWatchlistStock('${symbol}')">
                            <strong>${symbol}</strong> - Matches criteria
                        </div>
                    `;
                });
                
                container.innerHTML = html;
                document.getElementById('scanStatus').textContent = `Found ${results.length} matches`;
                addLog(`🎯 Scan complete: ${results.length} matches found`, 'success');
            }, 2000);
        }

        function stopScanning() {
            document.getElementById('scanStatus').textContent = 'Scan stopped';
            addLog('🛑 Market scan stopped', 'info');
        }

        // Chart functions
        function changeTimeframe(timeframe) {
            currentTimeframe = timeframe;
            document.getElementById('currentTimeframe').textContent = timeframe.toUpperCase();
            
            document.querySelectorAll('.chart-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            addLog(`📊 Chart timeframe changed to ${timeframe}`, 'info');
        }

        // Utility functions
        function showLogs() {
            const logsPanel = document.getElementById('logsPanel');
            const isVisible = logsPanel.style.display === 'block';
            logsPanel.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible) {
                addLog('📋 Logs panel opened', 'info');
            }
        }

        function downloadManual() {
            alert('📖 Trading Manual\n\nFynda Auto Trading BOT User Guide\n\n• Demo Mode: Safe testing with simulated data\n• Live Mode: Real trading with Schwab connection\n• Auto Trading: Custom ThinkOrSwim strategies\n• Emergency Stop: Instant halt of all trading\n• Hold Mode: Temporarily disable trading\n\nFor full documentation, visit our website.');
        }

        // Auto-refresh and updates
        function startPriceUpdates() {
            priceUpdateInterval = setInterval(() => {
                if (currentTicker) {
                    updateCurrentPrice();
                    updateIndicators();
                }
                
                // Update watchlist prices
                Object.keys(demoStocks).forEach(symbol => {
                    const change = (Math.random() - 0.5) * 2;
                    demoStocks[symbol].price += change;
                    demoStocks[symbol].change += change;
                });
                
                if (document.getElementById('watchlistContainer').innerHTML !== '') {
                    loadDemoWatchlist();
                }
            }, 3000);
        }

        // Initialize app
        console.log('✅ Fynda Auto Trading BOT loaded successfully');
    </script>
</body>
</html>
